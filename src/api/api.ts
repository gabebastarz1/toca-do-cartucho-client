/* tslint:disable */
/* eslint-disable */
/**
 * TocaDoCartuchoAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'tokenType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'accessToken': string | null;
    /**
     * 
     * @type {number}
     * @memberof AccessTokenResponse
     */
    'expiresIn': number;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'refreshToken': string | null;
}
/**
 * 
 * @export
 * @interface AdvertisementForCreationDTO
 */
export interface AdvertisementForCreationDTO {
    /**
     * 
     * @type {string}
     * @memberof AdvertisementForCreationDTO
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof AdvertisementForCreationDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForCreationDTO
     */
    'availableStock'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForCreationDTO
     */
    'preservationStateId': number;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForCreationDTO
     */
    'cartridgeTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForCreationDTO
     */
    'gameLocalizationId'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementForCreationDTO
     */
    'languageSupportsIds'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForCreationDTO
     */
    'gameId': number;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForCreationDTO
     */
    'price'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdvertisementForCreationDTO
     */
    'isTrade'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementForCreationDTO
     */
    'acceptedTradeGameIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementForCreationDTO
     */
    'acceptedTradeCartridgeTypeIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementForCreationDTO
     */
    'acceptedTradePreservationStateIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<AdvertisementVariationForCreationDTO>}
     * @memberof AdvertisementForCreationDTO
     */
    'variations'?: Array<AdvertisementVariationForCreationDTO> | null;
}
/**
 * 
 * @export
 * @interface AdvertisementForUpdateDTO
 */
export interface AdvertisementForUpdateDTO {
    /**
     * 
     * @type {string}
     * @memberof AdvertisementForUpdateDTO
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdvertisementForUpdateDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {AdvertisementStatusNullable}
     * @memberof AdvertisementForUpdateDTO
     */
    'status'?: AdvertisementStatusNullable | null;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForUpdateDTO
     */
    'availableStock'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForUpdateDTO
     */
    'preservationStateId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForUpdateDTO
     */
    'cartridgeTypeId'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementForUpdateDTO
     */
    'languageSupportsIds'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForUpdateDTO
     */
    'gameLocalizationId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementForUpdateDTO
     */
    'price'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementForUpdateDTO
     */
    'acceptedTradeGameIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementForUpdateDTO
     */
    'acceptedTradeCartridgeTypeIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementForUpdateDTO
     */
    'acceptedTradePreservationStateIds'?: Array<number> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const AdvertisementStatusNullable = {
    Inactive: 'Inactive',
    Active: 'Active',
    Unavailable: 'Unavailable'
} as const;

export type AdvertisementStatusNullable = typeof AdvertisementStatusNullable[keyof typeof AdvertisementStatusNullable];


/**
 * 
 * @export
 * @interface AdvertisementVariationForCreationDTO
 */
export interface AdvertisementVariationForCreationDTO {
    /**
     * 
     * @type {string}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'availableStock'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'preservationStateId': number;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'cartridgeTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'gameLocalizationId'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'languageSupportsIds'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'price'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'isTrade'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'acceptedTradeGameIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'acceptedTradeCartridgeTypeIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof AdvertisementVariationForCreationDTO
     */
    'acceptedTradePreservationStateIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface ForgotPasswordRequest
 */
export interface ForgotPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordRequest
     */
    'email': string | null;
}
/**
 * 
 * @export
 * @interface HttpValidationProblemDetails
 */
export interface HttpValidationProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof HttpValidationProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'instance'?: string | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof HttpValidationProblemDetails
     */
    'errors'?: { [key: string]: Array<string>; } | null;
}
/**
 * 
 * @export
 * @interface InfoRequest
 */
export interface InfoRequest {
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'newEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'newPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'oldPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface InfoResponse
 */
export interface InfoResponse {
    /**
     * 
     * @type {string}
     * @memberof InfoResponse
     */
    'email': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof InfoResponse
     */
    'isEmailConfirmed': boolean;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'twoFactorCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'twoFactorRecoveryCode'?: string | null;
}
/**
 * 
 * @export
 * @interface RefreshRequest
 */
export interface RefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshRequest
     */
    'refreshToken': string | null;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string | null;
}
/**
 * 
 * @export
 * @interface ResendConfirmationEmailRequest
 */
export interface ResendConfirmationEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof ResendConfirmationEmailRequest
     */
    'email': string | null;
}
/**
 * 
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'resetCode': string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'newPassword': string | null;
}
/**
 * 
 * @export
 * @interface TwoFactorRequest
 */
export interface TwoFactorRequest {
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'enable'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof TwoFactorRequest
     */
    'twoFactorCode'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'resetSharedKey'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'resetRecoveryCodes'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'forgetMachine'?: boolean;
}
/**
 * 
 * @export
 * @interface TwoFactorResponse
 */
export interface TwoFactorResponse {
    /**
     * 
     * @type {string}
     * @memberof TwoFactorResponse
     */
    'sharedKey': string | null;
    /**
     * 
     * @type {number}
     * @memberof TwoFactorResponse
     */
    'recoveryCodesLeft': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TwoFactorResponse
     */
    'recoveryCodes'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorResponse
     */
    'isTwoFactorEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorResponse
     */
    'isMachineRemembered': boolean;
}
/**
 * 
 * @export
 * @interface UserFavoriteAdvertisementsForCreationDTO
 */
export interface UserFavoriteAdvertisementsForCreationDTO {
    /**
     * 
     * @type {number}
     * @memberof UserFavoriteAdvertisementsForCreationDTO
     */
    'advertisementId'?: number;
}
/**
 * 
 * @export
 * @interface UserForCreationDTO
 */
export interface UserForCreationDTO {
    /**
     * 
     * @type {string}
     * @memberof UserForCreationDTO
     */
    'nickName': string;
    /**
     * 
     * @type {string}
     * @memberof UserForCreationDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserForCreationDTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserForCreationDTO
     */
    'cpf'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserForCreationDTO
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserForCreationDTO
     */
    'lastName'?: string | null;
}
/**
 * 
 * @export
 * @interface UserForUpdateDTO
 */
export interface UserForUpdateDTO {
    /**
     * 
     * @type {string}
     * @memberof UserForUpdateDTO
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserForUpdateDTO
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserForUpdateDTO
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserForUpdateDTO
     */
    'cpf'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserForUpdateDTO
     */
    'roles'?: Array<string> | null;
}

/**
 * AdvertisementApi - axios parameter creator
 * @export
 */
export const AdvertisementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {AdvertisementStatusNullable} [status] 
         * @param {Array<number>} [preservationStateIds] 
         * @param {Array<number>} [cartridgeTypeIds] 
         * @param {Array<string>} [sellerIds] 
         * @param {Array<number>} [gameIds] 
         * @param {boolean} [isTrade] 
         * @param {boolean} [isSale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsGet: async (title?: string, description?: string, maxPrice?: number, minPrice?: number, status?: AdvertisementStatusNullable, preservationStateIds?: Array<number>, cartridgeTypeIds?: Array<number>, sellerIds?: Array<string>, gameIds?: Array<number>, isTrade?: boolean, isSale?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/advertisements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['MaxPrice'] = maxPrice;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['MinPrice'] = minPrice;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (preservationStateIds) {
                localVarQueryParameter['PreservationStateIds'] = preservationStateIds;
            }

            if (cartridgeTypeIds) {
                localVarQueryParameter['CartridgeTypeIds'] = cartridgeTypeIds;
            }

            if (sellerIds) {
                localVarQueryParameter['SellerIds'] = sellerIds;
            }

            if (gameIds) {
                localVarQueryParameter['GameIds'] = gameIds;
            }

            if (isTrade !== undefined) {
                localVarQueryParameter['IsTrade'] = isTrade;
            }

            if (isSale !== undefined) {
                localVarQueryParameter['IsSale'] = isSale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdvertisementsIdDelete', 'id', id)
            const localVarPath = `/api/advertisements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdvertisementsIdGet', 'id', id)
            const localVarPath = `/api/advertisements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AdvertisementForUpdateDTO} [advertisementForUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsIdPatch: async (id: number, advertisementForUpdateDTO?: AdvertisementForUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdvertisementsIdPatch', 'id', id)
            const localVarPath = `/api/advertisements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(advertisementForUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AdvertisementForCreationDTO} [advertisementForCreationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsPost: async (advertisementForCreationDTO?: AdvertisementForCreationDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/advertisements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(advertisementForCreationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdvertisementApi - functional programming interface
 * @export
 */
export const AdvertisementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdvertisementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {AdvertisementStatusNullable} [status] 
         * @param {Array<number>} [preservationStateIds] 
         * @param {Array<number>} [cartridgeTypeIds] 
         * @param {Array<string>} [sellerIds] 
         * @param {Array<number>} [gameIds] 
         * @param {boolean} [isTrade] 
         * @param {boolean} [isSale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdvertisementsGet(title?: string, description?: string, maxPrice?: number, minPrice?: number, status?: AdvertisementStatusNullable, preservationStateIds?: Array<number>, cartridgeTypeIds?: Array<number>, sellerIds?: Array<string>, gameIds?: Array<number>, isTrade?: boolean, isSale?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdvertisementsGet(title, description, maxPrice, minPrice, status, preservationStateIds, cartridgeTypeIds, sellerIds, gameIds, isTrade, isSale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdvertisementApi.apiAdvertisementsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdvertisementsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdvertisementsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdvertisementApi.apiAdvertisementsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdvertisementsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdvertisementsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdvertisementApi.apiAdvertisementsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AdvertisementForUpdateDTO} [advertisementForUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdvertisementsIdPatch(id: number, advertisementForUpdateDTO?: AdvertisementForUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdvertisementsIdPatch(id, advertisementForUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdvertisementApi.apiAdvertisementsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AdvertisementForCreationDTO} [advertisementForCreationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdvertisementsPost(advertisementForCreationDTO?: AdvertisementForCreationDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdvertisementsPost(advertisementForCreationDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdvertisementApi.apiAdvertisementsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdvertisementApi - factory interface
 * @export
 */
export const AdvertisementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdvertisementApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {AdvertisementStatusNullable} [status] 
         * @param {Array<number>} [preservationStateIds] 
         * @param {Array<number>} [cartridgeTypeIds] 
         * @param {Array<string>} [sellerIds] 
         * @param {Array<number>} [gameIds] 
         * @param {boolean} [isTrade] 
         * @param {boolean} [isSale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsGet(title?: string, description?: string, maxPrice?: number, minPrice?: number, status?: AdvertisementStatusNullable, preservationStateIds?: Array<number>, cartridgeTypeIds?: Array<number>, sellerIds?: Array<string>, gameIds?: Array<number>, isTrade?: boolean, isSale?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdvertisementsGet(title, description, maxPrice, minPrice, status, preservationStateIds, cartridgeTypeIds, sellerIds, gameIds, isTrade, isSale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdvertisementsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdvertisementsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AdvertisementForUpdateDTO} [advertisementForUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsIdPatch(id: number, advertisementForUpdateDTO?: AdvertisementForUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdvertisementsIdPatch(id, advertisementForUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdvertisementForCreationDTO} [advertisementForCreationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsPost(advertisementForCreationDTO?: AdvertisementForCreationDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdvertisementsPost(advertisementForCreationDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdvertisementApi - object-oriented interface
 * @export
 * @class AdvertisementApi
 * @extends {BaseAPI}
 */
export class AdvertisementApi extends BaseAPI {
    /**
     * 
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {number} [maxPrice] 
     * @param {number} [minPrice] 
     * @param {AdvertisementStatusNullable} [status] 
     * @param {Array<number>} [preservationStateIds] 
     * @param {Array<number>} [cartridgeTypeIds] 
     * @param {Array<string>} [sellerIds] 
     * @param {Array<number>} [gameIds] 
     * @param {boolean} [isTrade] 
     * @param {boolean} [isSale] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementApi
     */
    public apiAdvertisementsGet(title?: string, description?: string, maxPrice?: number, minPrice?: number, status?: AdvertisementStatusNullable, preservationStateIds?: Array<number>, cartridgeTypeIds?: Array<number>, sellerIds?: Array<string>, gameIds?: Array<number>, isTrade?: boolean, isSale?: boolean, options?: RawAxiosRequestConfig) {
        return AdvertisementApiFp(this.configuration).apiAdvertisementsGet(title, description, maxPrice, minPrice, status, preservationStateIds, cartridgeTypeIds, sellerIds, gameIds, isTrade, isSale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementApi
     */
    public apiAdvertisementsIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return AdvertisementApiFp(this.configuration).apiAdvertisementsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementApi
     */
    public apiAdvertisementsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return AdvertisementApiFp(this.configuration).apiAdvertisementsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AdvertisementForUpdateDTO} [advertisementForUpdateDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementApi
     */
    public apiAdvertisementsIdPatch(id: number, advertisementForUpdateDTO?: AdvertisementForUpdateDTO, options?: RawAxiosRequestConfig) {
        return AdvertisementApiFp(this.configuration).apiAdvertisementsIdPatch(id, advertisementForUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdvertisementForCreationDTO} [advertisementForCreationDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementApi
     */
    public apiAdvertisementsPost(advertisementForCreationDTO?: AdvertisementForCreationDTO, options?: RawAxiosRequestConfig) {
        return AdvertisementApiFp(this.configuration).apiAdvertisementsPost(advertisementForCreationDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdvertisementImageApi - axios parameter creator
 * @export
 */
export const AdvertisementImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} advertisementId 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsAdvertisementIdImagePost: async (advertisementId: number, image?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertisementId' is not null or undefined
            assertParamExists('apiAdvertisementsAdvertisementIdImagePost', 'advertisementId', advertisementId)
            const localVarPath = `/api/advertisements/{advertisementId}/image`
                .replace(`{${"advertisementId"}}`, encodeURIComponent(String(advertisementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} advertisementId 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsAdvertisementIdImagesPost: async (advertisementId: number, images?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertisementId' is not null or undefined
            assertParamExists('apiAdvertisementsAdvertisementIdImagesPost', 'advertisementId', advertisementId)
            const localVarPath = `/api/advertisements/{advertisementId}/images`
                .replace(`{${"advertisementId"}}`, encodeURIComponent(String(advertisementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('images', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsIdImagesGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdvertisementsIdImagesGet', 'id', id)
            const localVarPath = `/api/advertisements/{id}/images`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsImagesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdvertisementsImagesIdDelete', 'id', id)
            const localVarPath = `/api/advertisements/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdvertisementImageApi - functional programming interface
 * @export
 */
export const AdvertisementImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdvertisementImageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} advertisementId 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdvertisementsAdvertisementIdImagePost(advertisementId: number, image?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdvertisementsAdvertisementIdImagePost(advertisementId, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdvertisementImageApi.apiAdvertisementsAdvertisementIdImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} advertisementId 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdvertisementsAdvertisementIdImagesPost(advertisementId: number, images?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdvertisementsAdvertisementIdImagesPost(advertisementId, images, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdvertisementImageApi.apiAdvertisementsAdvertisementIdImagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdvertisementsIdImagesGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdvertisementsIdImagesGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdvertisementImageApi.apiAdvertisementsIdImagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdvertisementsImagesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdvertisementsImagesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdvertisementImageApi.apiAdvertisementsImagesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdvertisementImageApi - factory interface
 * @export
 */
export const AdvertisementImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdvertisementImageApiFp(configuration)
    return {
        /**
         * 
         * @param {number} advertisementId 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsAdvertisementIdImagePost(advertisementId: number, image?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdvertisementsAdvertisementIdImagePost(advertisementId, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} advertisementId 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsAdvertisementIdImagesPost(advertisementId: number, images?: Array<File>, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdvertisementsAdvertisementIdImagesPost(advertisementId, images, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsIdImagesGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdvertisementsIdImagesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdvertisementsImagesIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdvertisementsImagesIdDelete(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdvertisementImageApi - object-oriented interface
 * @export
 * @class AdvertisementImageApi
 * @extends {BaseAPI}
 */
export class AdvertisementImageApi extends BaseAPI {
    /**
     * 
     * @param {number} advertisementId 
     * @param {File} [image] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementImageApi
     */
    public apiAdvertisementsAdvertisementIdImagePost(advertisementId: number, image?: File, options?: RawAxiosRequestConfig) {
        return AdvertisementImageApiFp(this.configuration).apiAdvertisementsAdvertisementIdImagePost(advertisementId, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} advertisementId 
     * @param {Array<File>} [images] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementImageApi
     */
    public apiAdvertisementsAdvertisementIdImagesPost(advertisementId: number, images?: Array<File>, options?: RawAxiosRequestConfig) {
        return AdvertisementImageApiFp(this.configuration).apiAdvertisementsAdvertisementIdImagesPost(advertisementId, images, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementImageApi
     */
    public apiAdvertisementsIdImagesGet(id: number, options?: RawAxiosRequestConfig) {
        return AdvertisementImageApiFp(this.configuration).apiAdvertisementsIdImagesGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementImageApi
     */
    public apiAdvertisementsImagesIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return AdvertisementImageApiFp(this.configuration).apiAdvertisementsImagesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CartridgeTypeApi - axios parameter creator
 * @export
 */
export const CartridgeTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartridgeTypesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cartridge-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartridgeTypeApi - functional programming interface
 * @export
 */
export const CartridgeTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartridgeTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCartridgeTypesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCartridgeTypesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartridgeTypeApi.apiCartridgeTypesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CartridgeTypeApi - factory interface
 * @export
 */
export const CartridgeTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartridgeTypeApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartridgeTypesGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCartridgeTypesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartridgeTypeApi - object-oriented interface
 * @export
 * @class CartridgeTypeApi
 * @extends {BaseAPI}
 */
export class CartridgeTypeApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartridgeTypeApi
     */
    public apiCartridgeTypesGet(options?: RawAxiosRequestConfig) {
        return CartridgeTypeApiFp(this.configuration).apiCartridgeTypesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GameApi - axios parameter creator
 * @export
 */
export const GameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesGet: async (name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameApi - functional programming interface
 * @export
 */
export const GameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGamesGet(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGamesGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.apiGamesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameApi - factory interface
 * @export
 */
export const GameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesGet(name?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiGamesGet(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameApi - object-oriented interface
 * @export
 * @class GameApi
 * @extends {BaseAPI}
 */
export class GameApi extends BaseAPI {
    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public apiGamesGet(name?: string, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).apiGamesGet(name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GameLocalizationApi - axios parameter creator
 * @export
 */
export const GameLocalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [gameId] 
         * @param {string} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGameLocalizationsGet: async (gameId?: number, region?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/game-localizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameId !== undefined) {
                localVarQueryParameter['GameId'] = gameId;
            }

            if (region !== undefined) {
                localVarQueryParameter['Region'] = region;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameLocalizationApi - functional programming interface
 * @export
 */
export const GameLocalizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameLocalizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [gameId] 
         * @param {string} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGameLocalizationsGet(gameId?: number, region?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGameLocalizationsGet(gameId, region, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameLocalizationApi.apiGameLocalizationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameLocalizationApi - factory interface
 * @export
 */
export const GameLocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameLocalizationApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [gameId] 
         * @param {string} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGameLocalizationsGet(gameId?: number, region?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiGameLocalizationsGet(gameId, region, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameLocalizationApi - object-oriented interface
 * @export
 * @class GameLocalizationApi
 * @extends {BaseAPI}
 */
export class GameLocalizationApi extends BaseAPI {
    /**
     * 
     * @param {number} [gameId] 
     * @param {string} [region] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameLocalizationApi
     */
    public apiGameLocalizationsGet(gameId?: number, region?: string, options?: RawAxiosRequestConfig) {
        return GameLocalizationApiFp(this.configuration).apiGameLocalizationsGet(gameId, region, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LanguageSupportApi - axios parameter creator
 * @export
 */
export const LanguageSupportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [gameId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLanguageSupportsGet: async (gameId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/language-supports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameId !== undefined) {
                localVarQueryParameter['GameId'] = gameId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LanguageSupportApi - functional programming interface
 * @export
 */
export const LanguageSupportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LanguageSupportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [gameId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLanguageSupportsGet(gameId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLanguageSupportsGet(gameId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanguageSupportApi.apiLanguageSupportsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LanguageSupportApi - factory interface
 * @export
 */
export const LanguageSupportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LanguageSupportApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [gameId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLanguageSupportsGet(gameId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLanguageSupportsGet(gameId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LanguageSupportApi - object-oriented interface
 * @export
 * @class LanguageSupportApi
 * @extends {BaseAPI}
 */
export class LanguageSupportApi extends BaseAPI {
    /**
     * 
     * @param {number} [gameId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguageSupportApi
     */
    public apiLanguageSupportsGet(gameId?: number, options?: RawAxiosRequestConfig) {
        return LanguageSupportApiFp(this.configuration).apiLanguageSupportsGet(gameId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PreservationStateApi - axios parameter creator
 * @export
 */
export const PreservationStateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPreservationStatesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/preservation-states`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PreservationStateApi - functional programming interface
 * @export
 */
export const PreservationStateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PreservationStateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPreservationStatesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPreservationStatesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PreservationStateApi.apiPreservationStatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PreservationStateApi - factory interface
 * @export
 */
export const PreservationStateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PreservationStateApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPreservationStatesGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPreservationStatesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PreservationStateApi - object-oriented interface
 * @export
 * @class PreservationStateApi
 * @extends {BaseAPI}
 */
export class PreservationStateApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreservationStateApi
     */
    public apiPreservationStatesGet(options?: RawAxiosRequestConfig) {
        return PreservationStateApiFp(this.configuration).apiPreservationStatesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDebuggingHelloWorldGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/debugging/hello-world`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDebuggingHelloWorldGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDebuggingHelloWorldGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestApi.apiDebuggingHelloWorldGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDebuggingHelloWorldGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiDebuggingHelloWorldGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public apiDebuggingHelloWorldGet(options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).apiDebuggingHelloWorldGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TocaDoCartuchoApi - axios parameter creator
 * @export
 */
export const TocaDoCartuchoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} forgotPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordPost: async (forgotPasswordRequest: ForgotPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordRequest' is not null or undefined
            assertParamExists('forgotPasswordPost', 'forgotPasswordRequest', forgotPasswordRequest)
            const localVarPath = `/forgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (loginRequest: LoginRequest, useCookies?: boolean, useSessionCookies?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('loginPost', 'loginRequest', loginRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (useCookies !== undefined) {
                localVarQueryParameter['useCookies'] = useCookies;
            }

            if (useSessionCookies !== undefined) {
                localVarQueryParameter['useSessionCookies'] = useSessionCookies;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TwoFactorRequest} twoFactorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manage2faPost: async (twoFactorRequest: TwoFactorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'twoFactorRequest' is not null or undefined
            assertParamExists('manage2faPost', 'twoFactorRequest', twoFactorRequest)
            const localVarPath = `/manage/2fa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(twoFactorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/manage/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InfoRequest} infoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageInfoPost: async (infoRequest: InfoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'infoRequest' is not null or undefined
            assertParamExists('manageInfoPost', 'infoRequest', infoRequest)
            const localVarPath = `/manage/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(infoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} code 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapIdentityApiConfirmEmail: async (userId: string, code: string, changedEmail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('mapIdentityApiConfirmEmail', 'userId', userId)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('mapIdentityApiConfirmEmail', 'code', code)
            const localVarPath = `/confirmEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (changedEmail !== undefined) {
                localVarQueryParameter['changedEmail'] = changedEmail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshRequest} refreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshPost: async (refreshRequest: RefreshRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshRequest' is not null or undefined
            assertParamExists('refreshPost', 'refreshRequest', refreshRequest)
            const localVarPath = `/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('registerPost', 'registerRequest', registerRequest)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} resendConfirmationEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendConfirmationEmailPost: async (resendConfirmationEmailRequest: ResendConfirmationEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resendConfirmationEmailRequest' is not null or undefined
            assertParamExists('resendConfirmationEmailPost', 'resendConfirmationEmailRequest', resendConfirmationEmailRequest)
            const localVarPath = `/resendConfirmationEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendConfirmationEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordPost: async (resetPasswordRequest: ResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordRequest' is not null or undefined
            assertParamExists('resetPasswordPost', 'resetPasswordRequest', resetPasswordRequest)
            const localVarPath = `/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TocaDoCartuchoApi - functional programming interface
 * @export
 */
export const TocaDoCartuchoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TocaDoCartuchoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} forgotPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPasswordPost(forgotPasswordRequest: ForgotPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPasswordPost(forgotPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TocaDoCartuchoApi.forgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(loginRequest: LoginRequest, useCookies?: boolean, useSessionCookies?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(loginRequest, useCookies, useSessionCookies, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TocaDoCartuchoApi.loginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TwoFactorRequest} twoFactorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manage2faPost(twoFactorRequest: TwoFactorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TwoFactorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manage2faPost(twoFactorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TocaDoCartuchoApi.manage2faPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TocaDoCartuchoApi.manageInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {InfoRequest} infoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageInfoPost(infoRequest: InfoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageInfoPost(infoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TocaDoCartuchoApi.manageInfoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} code 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mapIdentityApiConfirmEmail(userId: string, code: string, changedEmail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mapIdentityApiConfirmEmail(userId, code, changedEmail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TocaDoCartuchoApi.mapIdentityApiConfirmEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RefreshRequest} refreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshPost(refreshRequest: RefreshRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshPost(refreshRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TocaDoCartuchoApi.refreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TocaDoCartuchoApi.registerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} resendConfirmationEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendConfirmationEmailPost(resendConfirmationEmailRequest: ResendConfirmationEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendConfirmationEmailPost(resendConfirmationEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TocaDoCartuchoApi.resendConfirmationEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordPost(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordPost(resetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TocaDoCartuchoApi.resetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TocaDoCartuchoApi - factory interface
 * @export
 */
export const TocaDoCartuchoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TocaDoCartuchoApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} forgotPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordPost(forgotPasswordRequest: ForgotPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.forgotPasswordPost(forgotPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(loginRequest: LoginRequest, useCookies?: boolean, useSessionCookies?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<AccessTokenResponse> {
            return localVarFp.loginPost(loginRequest, useCookies, useSessionCookies, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TwoFactorRequest} twoFactorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manage2faPost(twoFactorRequest: TwoFactorRequest, options?: RawAxiosRequestConfig): AxiosPromise<TwoFactorResponse> {
            return localVarFp.manage2faPost(twoFactorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<InfoResponse> {
            return localVarFp.manageInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InfoRequest} infoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageInfoPost(infoRequest: InfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<InfoResponse> {
            return localVarFp.manageInfoPost(infoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} code 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapIdentityApiConfirmEmail(userId: string, code: string, changedEmail?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mapIdentityApiConfirmEmail(userId, code, changedEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshRequest} refreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshPost(refreshRequest: RefreshRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessTokenResponse> {
            return localVarFp.refreshPost(refreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.registerPost(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} resendConfirmationEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendConfirmationEmailPost(resendConfirmationEmailRequest: ResendConfirmationEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resendConfirmationEmailPost(resendConfirmationEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordPost(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetPasswordPost(resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TocaDoCartuchoApi - object-oriented interface
 * @export
 * @class TocaDoCartuchoApi
 * @extends {BaseAPI}
 */
export class TocaDoCartuchoApi extends BaseAPI {
    /**
     * 
     * @param {ForgotPasswordRequest} forgotPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TocaDoCartuchoApi
     */
    public forgotPasswordPost(forgotPasswordRequest: ForgotPasswordRequest, options?: RawAxiosRequestConfig) {
        return TocaDoCartuchoApiFp(this.configuration).forgotPasswordPost(forgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginRequest} loginRequest 
     * @param {boolean} [useCookies] 
     * @param {boolean} [useSessionCookies] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TocaDoCartuchoApi
     */
    public loginPost(loginRequest: LoginRequest, useCookies?: boolean, useSessionCookies?: boolean, options?: RawAxiosRequestConfig) {
        return TocaDoCartuchoApiFp(this.configuration).loginPost(loginRequest, useCookies, useSessionCookies, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TwoFactorRequest} twoFactorRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TocaDoCartuchoApi
     */
    public manage2faPost(twoFactorRequest: TwoFactorRequest, options?: RawAxiosRequestConfig) {
        return TocaDoCartuchoApiFp(this.configuration).manage2faPost(twoFactorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TocaDoCartuchoApi
     */
    public manageInfoGet(options?: RawAxiosRequestConfig) {
        return TocaDoCartuchoApiFp(this.configuration).manageInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InfoRequest} infoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TocaDoCartuchoApi
     */
    public manageInfoPost(infoRequest: InfoRequest, options?: RawAxiosRequestConfig) {
        return TocaDoCartuchoApiFp(this.configuration).manageInfoPost(infoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {string} code 
     * @param {string} [changedEmail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TocaDoCartuchoApi
     */
    public mapIdentityApiConfirmEmail(userId: string, code: string, changedEmail?: string, options?: RawAxiosRequestConfig) {
        return TocaDoCartuchoApiFp(this.configuration).mapIdentityApiConfirmEmail(userId, code, changedEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefreshRequest} refreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TocaDoCartuchoApi
     */
    public refreshPost(refreshRequest: RefreshRequest, options?: RawAxiosRequestConfig) {
        return TocaDoCartuchoApiFp(this.configuration).refreshPost(refreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TocaDoCartuchoApi
     */
    public registerPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig) {
        return TocaDoCartuchoApiFp(this.configuration).registerPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResendConfirmationEmailRequest} resendConfirmationEmailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TocaDoCartuchoApi
     */
    public resendConfirmationEmailPost(resendConfirmationEmailRequest: ResendConfirmationEmailRequest, options?: RawAxiosRequestConfig) {
        return TocaDoCartuchoApiFp(this.configuration).resendConfirmationEmailPost(resendConfirmationEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordRequest} resetPasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TocaDoCartuchoApi
     */
    public resetPasswordPost(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return TocaDoCartuchoApiFp(this.configuration).resetPasswordPost(resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersFavoriteAdvertisementsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersFavoriteAdvertisementsIdDelete', 'id', id)
            const localVarPath = `/api/users/favorite-advertisements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserFavoriteAdvertisementsForCreationDTO} [userFavoriteAdvertisementsForCreationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersFavoriteAdvertisementsPost: async (userFavoriteAdvertisementsForCreationDTO?: UserFavoriteAdvertisementsForCreationDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/favorite-advertisements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userFavoriteAdvertisementsForCreationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [cpf] 
         * @param {string} [email] 
         * @param {string} [fullName] 
         * @param {string} [nickName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet: async (cpf?: string, email?: string, fullName?: string, nickName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cpf !== undefined) {
                localVarQueryParameter['Cpf'] = cpf;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (fullName !== undefined) {
                localVarQueryParameter['FullName'] = fullName;
            }

            if (nickName !== undefined) {
                localVarQueryParameter['NickName'] = nickName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdDelete', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdGet', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UserForUpdateDTO} [userForUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdPatch: async (id: string, userForUpdateDTO?: UserForUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdPatch', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserForUpdateDTO} [userForUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPatch: async (userForUpdateDTO?: UserForUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserForCreationDTO} [userForCreationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost: async (userForCreationDTO?: UserForCreationDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForCreationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersProfileInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/profile-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersSecuredGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/secured`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersFavoriteAdvertisementsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersFavoriteAdvertisementsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUsersFavoriteAdvertisementsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserFavoriteAdvertisementsForCreationDTO} [userFavoriteAdvertisementsForCreationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersFavoriteAdvertisementsPost(userFavoriteAdvertisementsForCreationDTO?: UserFavoriteAdvertisementsForCreationDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersFavoriteAdvertisementsPost(userFavoriteAdvertisementsForCreationDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUsersFavoriteAdvertisementsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [cpf] 
         * @param {string} [email] 
         * @param {string} [fullName] 
         * @param {string} [nickName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersGet(cpf?: string, email?: string, fullName?: string, nickName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersGet(cpf, email, fullName, nickName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUsersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUsersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UserForUpdateDTO} [userForUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdPatch(id: string, userForUpdateDTO?: UserForUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdPatch(id, userForUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUsersIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserForUpdateDTO} [userForUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPatch(userForUpdateDTO?: UserForUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPatch(userForUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUsersPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserForCreationDTO} [userForCreationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPost(userForCreationDTO?: UserForCreationDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPost(userForCreationDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersProfileInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersProfileInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUsersProfileInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersSecuredGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersSecuredGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUsersSecuredGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersFavoriteAdvertisementsIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersFavoriteAdvertisementsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserFavoriteAdvertisementsForCreationDTO} [userFavoriteAdvertisementsForCreationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersFavoriteAdvertisementsPost(userFavoriteAdvertisementsForCreationDTO?: UserFavoriteAdvertisementsForCreationDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersFavoriteAdvertisementsPost(userFavoriteAdvertisementsForCreationDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [cpf] 
         * @param {string} [email] 
         * @param {string} [fullName] 
         * @param {string} [nickName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet(cpf?: string, email?: string, fullName?: string, nickName?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersGet(cpf, email, fullName, nickName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UserForUpdateDTO} [userForUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdPatch(id: string, userForUpdateDTO?: UserForUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersIdPatch(id, userForUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserForUpdateDTO} [userForUpdateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPatch(userForUpdateDTO?: UserForUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersPatch(userForUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserForCreationDTO} [userForCreationDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(userForCreationDTO?: UserForCreationDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersPost(userForCreationDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersProfileInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersProfileInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersSecuredGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersSecuredGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersFavoriteAdvertisementsIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersFavoriteAdvertisementsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserFavoriteAdvertisementsForCreationDTO} [userFavoriteAdvertisementsForCreationDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersFavoriteAdvertisementsPost(userFavoriteAdvertisementsForCreationDTO?: UserFavoriteAdvertisementsForCreationDTO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersFavoriteAdvertisementsPost(userFavoriteAdvertisementsForCreationDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [cpf] 
     * @param {string} [email] 
     * @param {string} [fullName] 
     * @param {string} [nickName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersGet(cpf?: string, email?: string, fullName?: string, nickName?: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersGet(cpf, email, fullName, nickName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UserForUpdateDTO} [userForUpdateDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersIdPatch(id: string, userForUpdateDTO?: UserForUpdateDTO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersIdPatch(id, userForUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserForUpdateDTO} [userForUpdateDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersPatch(userForUpdateDTO?: UserForUpdateDTO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersPatch(userForUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserForCreationDTO} [userForCreationDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersPost(userForCreationDTO?: UserForCreationDTO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersPost(userForCreationDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersProfileInfoGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersProfileInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersSecuredGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersSecuredGet(options).then((request) => request(this.axios, this.basePath));
    }
}



